import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator

base_dir = os.path.join('Datasets')
train_dir = os.path.join(base_dir, 'train')
test_dir = os.path.join(base_dir, 'test')

train_pumba_dir = os.path.join(train_dir, 'pumba')
train_surik_dir = os.path.join(train_dir, 'surik')
test_pumba_dir = os.path.join(test_dir, 'pumba')
test_surik_dir = os.path.join(test_dir, 'surik')

pumba_tr = len(os.listdir(train_pumba_dir))
surik_tr = len(os.listdir(train_surik_dir))

pumba_test = len(os.listdir(test_pumba_dir))
surik_test = len(os.listdir(test_surik_dir))

total_test = pumba_test + surik_test
total_train = pumba_tr + surik_tr

print('Кабанов в тестовом наборе данных: ', pumba_tr)
print('Сурикатов в тестовом наборе данных: ', surik_tr)
print('Кабанов в валидационном наборе данных: ', pumba_test)
print('Сурикатов в валидационном наборе данных: ', surik_test)

BATCH_SIZE = 10 # количество тренировочных изображений для обработки перед обновлением параметров модели
IMG_SHAPE = 80 # размерность 80x80 к которой будет преведено входное изображение

train_image_generator = ImageDataGenerator(rescale=1./255)
test_image_generator = ImageDataGenerator(rescale=1./255)

train_data_gen = train_image_generator.flow_from_directory(batch_size=BATCH_SIZE,
                                                          directory=train_dir,
                                                          shuffle=True,
                                                          target_size=(IMG_SHAPE,IMG_SHAPE),
                                                          class_mode='binary')
                                                          
test_data_gen = test_image_generator.flow_from_directory(batch_size=BATCH_SIZE,
                                                          directory=test_dir,
                                                          shuffle=False,
                                                          target_size=(IMG_SHAPE,IMG_SHAPE),
                                                          class_mode='binary')                                                          
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SHAPE, IMG_SHAPE, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
              
model.summary()

EPOCHS = 100
history = model.fit_generator(
    train_data_gen,
    steps_per_epoch=int(np.ceil(total_train / float(BATCH_SIZE))),
    epochs=EPOCHS,
    test_data=test_data_gen,
    test_steps=int(np.ceil(total_test / float(BATCH_SIZE)))
)
